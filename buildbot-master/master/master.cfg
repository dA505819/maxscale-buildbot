# -*- python -*-
# ex: set filetype=python:

import properties_values
import os
import datetime
import time
import jprops

from buildbot.plugins import *
from buildbot.interfaces import IRenderable
from zope.interface import implementer
from buildbot.steps.shell import ShellCommand, SetPropertyFromCommand
from buildbot.steps import shell
from buildbot.steps.trigger import Trigger

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

def save_env_to_property(rc, stdout, stderr):
    ''' Function used as the extrat_fn function for SetProperty class
        This takes the output from env command and creates a dictionary of
        the environment, the result of which is stored in a property names
        env'''
    if not rc:
        env_list = [l.strip() for l in stdout.split('\n')]
        env_dict = {l.split('=', 1)[0]: l.split('=', 1)[1] for l in
                    env_list if len(l.split('=', 1)) == 2}
        return {'env': env_dict}

@util.renderer
def get_custom_buildnumber(props):
    command = ['echo']
    command.extend([util.Interpolate('%(prop:custom_builder_id)s%(prop:buildnumber)s')])
    return command

@util.renderer
def clean_workspace_command(props):
    command = 'rm -rf ' + str(props.getProperty('WORKSPACE') + "/*")
    return command



####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = [worker.Worker("worker1", "0000")]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot version of a python hello-world project.

# c['change_source'] = []

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = []

# BUILD
c['schedulers'].append(schedulers.Triggerable(
    name="build",
    builderNames=["build"],
    properties={
        "scm_source": "develop",
        "box": properties_values.boxes_all[0],
        "target": 'develop',
        "cmake_flags": properties_values.default_cmake_debug,
        "do_not_destroy_vm": 'no',
        "build_experimental": 'yes',
        "repo_path": os.environ['HOME'] + "/repository",
        "try_already_running": 'no',
        "run_upgrade_test": 'no',
        "old_target": "2.1.9",
        "ci_url": "http://max-tst-01.mariadb.com/ci-repository/"
    }
))

c['schedulers'].append(schedulers.ForceScheduler(
    name="build_force",
    builderNames=["build"],
    properties=[
        util.StringParameter(name="scm_source", label="SCM source", size=50, default="develop"),
        util.ChoiceStringParameter(
            name="box",
            label="Box",
            choices=properties_values.boxes_all,
            default=properties_values.boxes_all[0]),
        util.StringParameter(name="target", label="Target", size=50, default="develop"),
        util.StringParameter(name="cmake_flags", label="CMake flags", size=50,
                             default=properties_values.default_cmake_debug),
        util.ChoiceStringParameter(
            name="do_not_destroy_vm",
            label="Do not destroy vm",
            choices=['no', 'yes'],
            default='no'),
        util.ChoiceStringParameter(
            name="build_experimental",
            label="Build experimental",
            choices=["yes", "no"],
            default="yes"),
        util.StringParameter(name="repo_path", label="Repo path", size=50, default=os.environ['HOME'] + "/repository"),
        util.ChoiceStringParameter(
            name="try_already_running",
            label="Try already running",
            choices=["no", "yes"],
            default="no"),
        util.ChoiceStringParameter(
            name="run_upgrade_test",
            label="Run upgrade test",
            choices=["no", "yes"],
            default="no"),
        util.StringParameter(name="old_target", label="Old target", size=50, default="2.1.9"),
        util.StringParameter(name="ci_url", label="ci url", size=50,
                             default="http://max-tst-01.mariadb.com/ci-repository/"),

    ]
))

# RUN TEST
c['schedulers'].append(schedulers.Triggerable(
    name="run_test",
    builderNames=["run_test"],
    properties= {
        "name": "test01",
        "repo_url": "https://github.com/mariadb-corporation/MaxScale.git",
        "target": "develop",
        "box": properties_values.boxes_all[0],
        "product": 'mariadb',
        "version": properties_values.versions[0],
        "do_not_destroy_vm": 'no',
        "test_set": "-LE HEAVY",
        "ci_url": "http://max-tst-01.mariadb.com/ci-repository/",
        "smoke": "yes",
        "big": "yes",
        "backend_ssl": 'no',
        "use_snapshots": 'no',
        "logs_dir": os.environ['HOME'] + "/LOGS",
        "no_vm_revert": 'no',
        "template": 'default',
        "test_branch": 'master'
    }
))

c['schedulers'].append(schedulers.ForceScheduler(
    name="run_test_force",
    builderNames=["run_test"],
    properties=[
        util.StringParameter(name="name", label="Name of this build", size=50, default="test01"),  # +
        util.StringParameter(name="repo_url", label="Repository url", size=200,
                             default="https://github.com/mariadb-corporation/MaxScale.git"),  # +
        util.StringParameter(name="target", label="Target", size=50, default="develop"),  # +
        util.ChoiceStringParameter(
            name="box",
            label="Box",
            choices=properties_values.boxes_all,
            default=properties_values.boxes_all[0]),  # +
        util.ChoiceStringParameter(
            name="product",
            label="Product",
            choices=['mariadb', 'mysql'],
            default='mariadb'),  # +
        util.ChoiceStringParameter(
            name="version",
            label="Version",
            choices=properties_values.versions,
            default=properties_values.versions[0]),  # +
        util.ChoiceStringParameter(
            name="do_not_destroy_vm",
            label="Do not destroy vm",
            choices=['no', 'yes'],
            default='no'),  # +
        util.StringParameter(name="test_set", label="Test set", size=50, default="-LE HEAVY"),  # +
        util.StringParameter(name="ci_url", label="ci url", size=50,
                             default="http://max-tst-01.mariadb.com/ci-repository/"),  # +
        util.ChoiceStringParameter(
            name="smoke",
            label="Run fast versions of every test",
            choices=["yes", "no"],
            default="yes"),  # +
        util.ChoiceStringParameter(
            name="big",
            label="Use larger number of VMs",
            choices=["yes", "no"],
            default="yes"),  # +
        util.ChoiceStringParameter(
            name="backend_ssl",
            label="Backend ssl",
            choices=["no", "yes"],
            default="no"),  # +
        util.ChoiceStringParameter(
            name="use_snapshots",
            label="Use snapshots",
            choices=["no", "yes"],
            default="no"),  # +
        util.StringParameter(name="logs_dir", label="Logs dir", size=50, default=os.environ['HOME'] + "/LOGS"),  # +
        util.ChoiceStringParameter(
            name="no_vm_revert",
            label="No vm revert",
            choices=["no", "yes"],
            default="no"),  # +
        util.ChoiceStringParameter(
            name="template",
            label="Template",
            choices=['default', 'nogalera', 'twomaxscales'],
            default='default'),  # +
        util.StringParameter(name="config_to_clone", label="Config to clone", size=50),  # +
        util.StringParameter(name="test_branch", label="Test branch", size=50, default="master"),  # +
    ]
))

# BUILD AND RUN
c['schedulers'].append(schedulers.ForceScheduler(
    name="build_and_run",
    label="Build and run",
    builderNames=["build_and_run"],
    properties=[
        util.StringParameter(name="name", label="Name of this build", size=50, default="test01"),  # +
        util.StringParameter(name="repo_url", label="Repository url", size=200,
                             default="https://github.com/mariadb-corporation/MaxScale.git"),  # +
        util.StringParameter(name="scm_source", label="SCM source", size=50, default="develop"),
        util.StringParameter(name="target", label="Target", size=50, default="develop"),  # +
        util.ChoiceStringParameter(
            name="build_experimental",
            label="Build experimental",
            choices=["yes", "no"],
            default="yes"),
        util.ChoiceStringParameter(
            name="box",
            label="Box",
            choices=properties_values.boxes_all,
            default=properties_values.boxes_all[0]),  # +
        util.ChoiceStringParameter(
            name="product",
            label="Product",
            choices=['mariadb', 'mysql'],
            default='mariadb'),  # +
        util.ChoiceStringParameter(
            name="version",
            label="Version",
            choices=properties_values.versions,
            default=properties_values.versions[0]),  # +
        util.StringParameter(name="cmake_flags", label="CMake flags", size=50,
                             default=properties_values.default_cmake_debug),
        util.ChoiceStringParameter(
            name="do_not_destroy_vm",
            label="Do not destroy vm",
            choices=['no', 'yes'],
            default='no'),  # +
        util.StringParameter(name="test_set", label="Test set", size=50, default="-LE HEAVY"),  # +
        util.StringParameter(name="ci_url", label="ci url", size=50,
                             default="http://max-tst-01.mariadb.com/ci-repository/"),  # +
        util.ChoiceStringParameter(
            name="smoke",
            label="Run fast versions of every test",
            choices=["yes", "no"],
            default="yes"),  # +
        util.ChoiceStringParameter(
            name="big",
            label="Use larger number of VMs",
            choices=["yes", "no"],
            default="yes"),  # +
        util.ChoiceStringParameter(
            name="backend_ssl",
            label="Backend ssl",
            choices=["no", "yes"],
            default="no"),  # +
    ]))


####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

factory_build_and_run = util.BuildFactory()
factory_run_test = util.BuildFactory()
factory_build = util.BuildFactory()

# BUILD BUILDER
factory_build.addStep(steps.SetProperty(property="JOB_NAME", value="build", haltOnFailure=True, ))
factory_build.addStep(steps.SetProperty(property="custom_builder_id", value="100", haltOnFailure=True, ))
factory_build.addStep(
    steps.SetPropertyFromCommand(property="BUILD_ID", command=get_custom_buildnumber, haltOnFailure=True))
factory_build.addStep(
    steps.SetPropertyFromCommand(command=['echo', os.getcwd() + '/workspace'], property="WORKSPACE",
                                 haltOnFailure=True, ))
factory_build.addStep(
    steps.Git(repourl=util.Property('repo_url'), mode='incremental',
              branch=util.Property('scm_source'), haltOnFailure=True))
factory_build.addStep(steps.ShellCommand(command=['sh', os.getcwd() + '/shell_scripts/run_build.sh'],
                                            haltOnFailure=True, env=util.Property('env')))
# Workspace cleanup
factory_build.addStep(steps.ShellCommand(command=clean_workspace_command,
                                            alwaysRun=True, env=util.Property('env')))

# TEST BUILDER
factory_run_test.addStep(
    steps.Git(repourl=util.Property('repo_url'), mode='incremental',
              branch=util.Property('test_branch'), haltOnFailure=True))

# Save env

factory_run_test.addStep(
    steps.SetPropertyFromCommand(command=['date', "+%Y-%m-%d %H-%M-%S"], property="BUILD_TIMESTAMP",
                                 haltOnFailure=True, ))
factory_run_test.addStep(
    steps.SetPropertyFromCommand(command=['echo', os.getcwd() + '/workspace'], property="WORKSPACE",
                                 haltOnFailure=True, ))
factory_run_test.addStep(steps.SetProperty(property="JOB_NAME", value="run_test", haltOnFailure=True, ))
factory_run_test.addStep(steps.SetProperty(property="custom_builder_id", value="101", haltOnFailure=True, ))
factory_run_test.addStep(
    steps.SetPropertyFromCommand(property="BUILD_ID", command=get_custom_buildnumber, haltOnFailure=True))

factory_run_test.addStep(shell.SetProperty(
    command="bash -c env",
    haltOnFailure=True,
    extract_fn=save_env_to_property,
    env={
        "WORKSPACE": util.Property('WORKSPACE'),
        "JOB_NAME": util.Property('JOB_NAME'),
        "BUILD_ID": util.Property('BUILD_ID'),
        "BUILD_NUMBER": util.Property('BUILD_ID'),
        "BUILD_TIMESTAMP": util.Property('BUILD_TIMESTAMP'),
        "BUILD_LOG_PARSING_RESULT": 'Build log parsing finished with an error',
        "name": util.Property('name'),
        "target": util.Property('target'),
        "box": util.Property('box'),
        "product": util.Property('product'),
        "version": util.Property('version'),
        "do_not_destroy_vm": util.Property('do_not_destroy_vm'),
        "test_set": util.Property('test_set'),
        "ci_url": util.Property('ci_url'),
        "smoke": util.Property('smoke'),
        "big": util.Property('big'),
        "backend_ssl": util.Property('backend_ssl'),
        "use_snapshots": util.Property('use_snapshots'),
        "logs_dir": util.Property('logs_dir'),
        "no_vm_revert": util.Property('no_vm_revert'),
        "template": util.Property('template'),
        "config_to_clone": util.Property('config_to_clone'),
        "test_branch": util.Property('test_branch'),
    }))

# Run test and collect
factory_run_test.addStep(steps.ShellCommand(command=['sh', os.getcwd() + '/shell_scripts/run_test_and_collect.sh'],
                                            haltOnFailure=True, env=util.Property('env')))


# Parse build log
factory_run_test.addStep(steps.ShellCommand(command=['sh', os.getcwd() + '/shell_scripts/parse_build_log.sh'],
                                            haltOnFailure=True, env=util.Property('env')))

# # Inject build results
# factory_run_test.addStep(
#     steps.SetProperty(property="env", value=inject_properties_to_env))

# Create env coredumps
factory_run_test.addStep(steps.ShellCommand(command=['sh', os.getcwd() + '/shell_scripts/create_env_coredumps.sh'],
                                            haltOnFailure=True, env=util.Property('env')))

# Write build results
factory_run_test.addStep(steps.ShellCommand(command=['sh', os.getcwd() + '/shell_scripts/write_build_results.sh'],
                                            haltOnFailure=True, env=util.Property('env')))

# Publish report portal
factory_run_test.addStep(steps.ShellCommand(command=['sh', os.getcwd() + '/shell_scripts/publish_report_portal.sh'],
                                            haltOnFailure=True, env=util.Property('env')))

# Workspace cleanup
factory_run_test.addStep(steps.ShellCommand(command=clean_workspace_command,
                                            alwaysRun=True, env=util.Property('env')))


# BUILD AND RUN BUILDER
factory_build_and_run.addStep(Trigger(schedulerNames=['build'], waitForFinish=True, copy_properties=[
    "name",
    "repo_url",
    "scm_source",
    "target",
    "build_experimental",
    "box",
    "product",
    "version",
    "cmake_flags"
    "do_not_destroy_vm",
    "test_set",
    "ci_url",
    "smoke",
    "big",
])
                              )

factory_build_and_run.addStep(Trigger(schedulerNames=['run_test'], waitForFinish=True, copy_properties=[
        "name",
        "repo_url",
        "scm_source",
        "target",
        "build_experimental",
        "box",
        "product",
        "version",
        "cmake_flags"
        "do_not_destroy_vm",
        "test_set",
        "ci_url",
        "smoke",
        "big"
    ],
    set_properties={'test_branch': util.Property('scm_source')}))

# Inject build results from ${WORKSPACE}/results_$BUILD_ID

# -----------



c['builders'] = []
c['builders'].append(
    util.BuilderConfig(name="build_and_run",
                       workernames=["worker1"],
                       factory=factory_build_and_run,
                       tags=['build', 'test'],
                       env=dict(os.environ)))
c['builders'].append(
    util.BuilderConfig(name="run_test",
                       workernames=["worker1"],
                       factory=factory_run_test,
                       tags=['test'],
                       env=dict(os.environ)))
c['builders'].append(
    util.BuilderConfig(name="build",
                       workernames=["worker1"],
                       factory=factory_build,
                       tags=['build'],
                       env=dict(os.environ)))

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

c['services'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "Maxscale buildbot"
c['titleURL'] = "https://github.com/mariadb-corporation/maxscale-buildbot"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = "http://localhost:8010/"

# minimalistic config to activate new web UI
c['www'] = dict(port=8010,
                plugins=dict(waterfall_view={}, console_view={}, grid_view={}))

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
